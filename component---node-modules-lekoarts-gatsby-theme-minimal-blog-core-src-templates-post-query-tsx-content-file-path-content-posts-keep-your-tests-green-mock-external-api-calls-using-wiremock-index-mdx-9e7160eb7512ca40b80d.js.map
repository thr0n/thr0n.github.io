{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-keep-your-tests-green-mock-external-api-calls-using-wiremock-index-mdx-9e7160eb7512ca40b80d.js","mappings":"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","sources":["webpack://thr0n.github.io/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post-footer.tsx","webpack://thr0n.github.io/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post.tsx","webpack://thr0n.github.io/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack://thr0n.github.io/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack://thr0n.github.io/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/seo.tsx","webpack://thr0n.github.io/./content/posts/keep-your-tests-green-mock-external-api-calls-using-wiremock/index.mdx","webpack://thr0n.github.io/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\"\nimport type { MBPostProps } from \"./post\"\n\nconst PostFooter = ({ post }: MBPostProps) => null\n\nexport default PostFooter\n","/** @jsx jsx */\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport { jsx, Heading } from \"theme-ui\"\nimport Layout from \"./layout\"\nimport ItemTags from \"./item-tags\"\nimport Seo from \"./seo\"\nimport PostFooter from \"./post-footer\"\n\nexport type MBPostProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    tags?: {\n      name: string\n      slug: string\n    }[]\n    description?: string\n    canonicalUrl?: string\n    excerpt: string\n    timeToRead?: number\n    banner?: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n}\n\nconst px = [`16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.1) 0px ${v} ${v} 0px`)\n\nconst Post: React.FC<React.PropsWithChildren<PageProps<MBPostProps>>> = ({ data: { post }, children }) => (\n  <Layout>\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": {\n          my: [4, 4, 5],\n          borderRadius: `4px`,\n          boxShadow: shadow.join(`, `),\n          \".gatsby-resp-image-image\": {\n            borderRadius: `4px`,\n          },\n        },\n        variant: `layout.content`,\n      }}\n    >\n      {children}\n    </section>\n    <PostFooter post={post} />\n  </Layout>\n)\n\nexport default Post\n\nexport const Head: HeadFC<MBPostProps> = ({ data: { post } }) => (\n  <Seo\n    title={post.title}\n    description={post.description ? post.description : post.excerpt}\n    image={post.banner ? post.banner?.childImageSharp?.resize?.src : undefined}\n    pathname={post.slug}\n    canonicalUrl={post.canonicalUrl}\n  />\n)\n","import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Post, { Head, MBPostProps } from \"../../../components/post\"\n\nexport default function MinimalBlogCorePost({ ...props }: PageProps<MBPostProps>) {\n  return <Post {...props} />\n}\n\nexport { Head }\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  image?: string\n  children?: React.ReactNode\n  canonicalUrl?: string\n}\n\nconst Seo = ({\n  title = ``,\n  description = ``,\n  pathname = ``,\n  image = ``,\n  children = null,\n  canonicalUrl = ``,\n}: SEOProps) => {\n  const site = useSiteMetadata()\n\n  const {\n    siteTitle,\n    siteTitleAlt: defaultTitle,\n    siteUrl,\n    siteDescription: defaultDescription,\n    siteImage: defaultImage,\n    author,\n    siteLanguage,\n  } = site\n\n  const seo = {\n    title: title ? `${title} | ${siteTitle}` : defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    image: `${siteUrl}${image || defaultImage}`,\n  }\n  return (\n    <>\n      <html lang={siteLanguage} />\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image:alt\" content={seo.description} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:image:alt\" content={seo.description} />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"gatsby-theme\" content=\"@lekoarts/gatsby-theme-minimal-blog\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={withPrefix(`/favicon-32x32.png`)} />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={withPrefix(`/favicon-16x16.png`)} />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={withPrefix(`/apple-touch-icon.png`)} />\n      {canonicalUrl ? <link rel=\"canonical\" href={canonicalUrl} /> : null}\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    blockquote: \"blockquote\",\n    hr: \"hr\",\n    h2: \"h2\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"When your software project is growing, chances are getting higher that you might want to (or have to 😉) send API calls to an external system you do not control but have to communicate with in order to use a service they provide.\"), \"\\n\", React.createElement(_components.p, null, \"Depending on your system's domain or your specific use case there are seemingly endless external services you could use. You may want to:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"ensure that the visitor on your website isn't a bot (using \\\"Google reCAPTCHA\\\" or the like)\"), \"\\n\", React.createElement(_components.li, null, \"ask a geo information service for the latitude and longitude of a given address\"), \"\\n\", React.createElement(_components.li, null, \"add an item to a shopping cart service or many others\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Calling an external API during execution of your application is perfectly fine, because otherwise you won't be able to use their service at all. But since interacting with an external system always bears the risk of failures (downtimes, breaking changes, etc.) you will probably take actions to make your app resilient to failing API calls.\"), \"\\n\", React.createElement(_components.p, null, \"Speaking of external systems and failures: If you added some tests to your project (and i hope you did!) you do not want to send real API calls to any external system during your tests. Calling real APIs during test execution is a bad practice. In general you don't want your tests to break if an external service is unavailable or behaving strange. Moreover,I assume that you don't want to test an external API, but rather focus on your application.\"), \"\\n\", React.createElement(_components.p, null, \"But how can we test an application that uses external APIs without sending request to an external system? I'm glad you ask!\"), \"\\n\", React.createElement(_components.p, null, \"I used WireMock in several projects to achieve this goal. WireMock describes itself as:\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"[…] a simulator for HTTP-based APIs. […] It enables you to stay productive when an API you depend on doesn't exist or isn't complete. It supports testing of edge cases and failure modes that the real API won't reliably produce.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"To me this sounds like a perfect match! If you now can't wait to use WireMock in your project you should definitely read on. I'll show you how to add WireMock to a Spring Boot/Kotlin application and how to test a Spring @Service that sends a GET request to an external API.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"HandsOn: Use WireMock with Kotlin, Spring Boot, and JUnit 5\"), \"\\n\", React.createElement(_components.p, null, \"For this how-to i created a new project using Spring Initializr. It's up to you to decide if you start from scratch or add WireMock to your already existing project. In both cases you have to add Spring Web, Spring Configuration Processer and of course WireMock to your Gradle build file to get started.\"), \"\\n\", React.createElement(_components.p, null, \"Afterwards we prepare the application.yml file to provide information about the external host. To keep this how-to as simple as possible we only add the hostname of the external service we want to communicate with. In this case it's just \\\"\", React.createElement(_components.a, {\n    href: \"http://example.org\"\n  }, \"http://example.org\"), \"\\\":\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"api:\\n  product_availablity:\\n    host: \\\"http://example.org\\\"\\n\")), \"\\n\", React.createElement(_components.p, null, \"The hostname will be accessed using a @Configuration bean. This is necessary since later we will override this bean in our test configuration to set the hostname to a different value:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"package com.medium.thr0n.wiremockdemo.configuration\\n\\nimport org.springframework.boot.context.properties.ConfigurationProperties\\nimport org.springframework.context.annotation.Configuration\\n\\n@Configuration\\n@ConfigurationProperties(\\\"api.productavailabilty\\\")\\nclass ProductAvailabilityProperties {\\n    lateinit var host: String\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"To call the external service we finally wire the Configuration bean into a simple demo service, read the current hostname and send the GET request using a RestTemplate:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"package com.medium.thr0n.wiremockdemo.service\\n\\nimport com.medium.thr0n.wiremockdemo.configuration.ProductAvailabilityProperties\\nimport org.springframework.http.HttpStatus\\nimport org.springframework.stereotype.Service\\nimport org.springframework.web.client.HttpClientErrorException\\nimport org.springframework.web.client.RestTemplate\\nimport org.springframework.web.server.ResponseStatusException\\n\\n@Service\\nclass ProductAvailabilityService(val properties: ProductAvailabilityProperties) {\\n    val restTemplate = RestTemplate()\\n\\n    fun isAvailable(articleId: String): String? {\\n        try {\\n            val response = restTemplate.getForEntity(\\n                    properties.host + \\\"/external-service/product-availability/\\\" + articleId,\\n                    String::class.java)\\n            return response.body\\n        } catch (e: HttpClientErrorException) {\\n            throw ResponseStatusException(HttpStatus.NOT_FOUND)\\n        }\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"That was the implementation part. Simple, right? So, let's add a test!\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, \"As said before we have to replace the configuration bean that stores the hostname of the external services, so we must allow bean definition overriding during test execution. To do so, we add a new application.yml file to src/test/resources/ and add the following configuration:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"spring:\\n  main:\\n    allow-bean-definition-overriding: true\\n\")), \"\\n\", React.createElement(_components.p, null, \"Now it's time to configure the WireMock server. First of all we tell WireMock to listen on a dynamic port. So hopefully we won't get into any trouble when our WireMock is executed by a CI/CD pipeline. To complete the WireMock setup we override the hostname of the external API to the baseUrl of the WireMock server. So from now on the ProductAvailabilityService will send all request to our WireMock instead of example.org.\"), \"\\n\", React.createElement(_components.p, null, \"To receive valid responses from WireMock we add two simple stubs. The first stub will just respond with a HTTP status 200 if the given product id is equal to 1. If the product id is equal to 0 HTTP status 404 will be returned.\"), \"\\n\", React.createElement(_components.p, null, \"Now we only have to start the WireMock server during the extension initialzitation. Ah, and don't forget to stop the WireMock inside the AfterAll function!\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"package com.medium.thr0n.wiremockdemo.junit\\n\\nimport com.github.tomakehurst.wiremock.WireMockServer\\nimport com.github.tomakehurst.wiremock.client.WireMock.*\\nimport com.github.tomakehurst.wiremock.core.WireMockConfiguration\\nimport com.medium.thr0n.wiremockdemo.configuration.ProductAvailabilityProperties\\nimport org.junit.jupiter.api.extension.AfterAllCallback\\nimport org.junit.jupiter.api.extension.BeforeAllCallback\\nimport org.junit.jupiter.api.extension.ExtensionContext\\nimport org.springframework.boot.test.context.TestConfiguration\\nimport org.springframework.context.annotation.Bean\\nimport org.springframework.context.annotation.Primary\\n\\nprivate val productAvailabilityWiremockServer =\\n    WireMockServer(WireMockConfiguration.options().dynamicPort())\\n\\n@TestConfiguration\\nclass ProductAvailabilityWiremockExtension : BeforeAllCallback, AfterAllCallback {\\n    val endpoint = \\\"/external-service/product-availability\\\"\\n\\n    init { productAvailabilityWiremockServer.start() }\\n\\n    @Bean\\n    @Primary\\n    fun productAvailabilityProperties(): ProductAvailabilityProperties {\\n        val props = ProductAvailabilityProperties()\\n        props.host = productAvailabilityWiremockServer.baseUrl()\\n        return props\\n    }\\n\\n    override fun beforeAll(context: ExtensionContext?) {\\n        productAvailabilityWiremockServer.stubFor(\\n                get(urlPathEqualTo(\\\"$endpoint/1\\\"))\\n                        .willReturn(ok())\\n        )\\n        productAvailabilityWiremockServer.stubFor(\\n                get(urlPathEqualTo(\\\"$endpoint/0\\\"))\\n                        .willReturn(notFound())\\n        )\\n    }\\n\\n    override fun afterAll(context: ExtensionContext?) {\\n        productAvailabilityWiremockServer.stop()\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"If you think that this is just a very simple stub that doesn't that much, you're absolutely right! But for this how-to it's completely sufficient. Would you like to dive deeper into stubbing? Check out the WireMock docs, they have lots of examples: \", React.createElement(_components.a, {\n    href: \"http://wiremock.org/docs/stubbing/\"\n  }, \"http://wiremock.org/docs/stubbing/\")), \"\\n\", React.createElement(_components.p, null, \"At the end it's time to add a @SpringBootTest. To use our WireMock we import the above extension class and extend the test with the same class. We use a TestRestTemplate to send GET request to a rest endpoint. The called endpoint will invoke the ProductAvailabilityService which in turn sends a GET request to the external API. But wait! Since the request is sent during test execution we won't ask example.org for the availability of a product. Instead WireMock will answer the request using the stub we defined above. Thank you, WireMock! 🙏\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"package com.medium.thr0n.wiremockdemo.controllers\\n\\nimport com.medium.thr0n.wiremockdemo.junit.ProductAvailabilityWiremockExtension\\nimport org.assertj.core.api.AssertionsForInterfaceTypes.assertThat\\nimport org.junit.jupiter.api.Test\\nimport org.junit.jupiter.api.extension.ExtendWith\\nimport org.springframework.boot.test.context.SpringBootTest\\nimport org.springframework.boot.test.web.client.TestRestTemplate\\nimport org.springframework.boot.web.server.LocalServerPort\\nimport org.springframework.context.annotation.Import\\nimport org.springframework.http.HttpMethod\\nimport org.springframework.http.HttpStatus\\n\\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\\n@Import(ProductAvailabilityWiremockExtension::class)\\n@ExtendWith(ProductAvailabilityWiremockExtension::class)\\ninternal class ProductAvailabilityControllerIntTest(\\n        @LocalServerPort val port: Int\\n) {\\n    val endpoint = \\\"http://localhost:$port/api/product-availability\\\"\\n    val restTemplate = TestRestTemplate()\\n\\n    @Test\\n    internal fun `Should return HTTP status OK for a valid product id`() {\\n        val response = restTemplate.exchange(\\n                \\\"$endpoint/1\\\",\\n                HttpMethod.GET,\\n                null,\\n                String::class.java)\\n        assertThat(response.statusCode).isEqualTo(HttpStatus.OK)\\n    }\\n\\n    @Test\\n    internal fun `Should return HTTP status NOT FOUND for an invalid product id`() {\\n        val response = restTemplate.exchange(\\n                \\\"$endpoint/0\\\",\\n                HttpMethod.GET,\\n                null,\\n                String::class.java)\\n        assertThat(response.statusCode).isEqualTo(HttpStatus.NOT_FOUND)\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"It's a wrap! If you like to see or run this small WireMock example on your machine feel free to checkout the repo at Github: \", React.createElement(_components.a, {\n    href: \"https://github.com/thr0n/medium-wiremock-demo\"\n  }, \"https://github.com/thr0n/medium-wiremock-demo\")), \"\\n\", React.createElement(_components.p, null, \"Do you have any questions regarding the how-to? Are you already using WireMock in your project? Or do you just want to say how great WireMock simplifies testing of applications that are interactiv with external APIs? I'm looking forward to reading your comment!\"), \"\\n\", React.createElement(_components.p, null, \"Happy mocking!\"), \"\\n\", React.createElement(_components.h3, null, \"Further reading\"), \"\\n\", React.createElement(_components.p, null, \"If you are interested in software reslience there are great articles out there. Here’s a short list just to name a few:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://blog.codecentric.de/en/2019/06/resilience-design-patterns-retry-fallback-timeout-circuit-breaker/\"\n  }, \"Resilience design patterns: retry, fallback, timeout, circuit breaker - codecentric AG Blog\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://hackernoon.com/lets-talk-about-resilience-97051e14761f\"\n  }, \"Let's talk about Resilience\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://dzone.com/articles/libraries-for-microservices-development\"\n  }, \"How to Make Services Resilient in a Microservices Environment - DZone Microservices\")), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/hendrik/dev/thr0n.github.io/content/posts/keep-your-tests-green-mock-external-api-calls-using-wiremock/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_ref","post","shadow","map","v","data","children","jsx","Layout","Heading","as","variant","title","sx","color","mt","a","fontSize","date","tags","React","ItemTags","timeToRead","my","borderRadius","boxShadow","join","PostFooter","Head","_ref2","_post$banner","_post$banner$childIma","_post$banner$childIma2","Seo","description","excerpt","image","banner","childImageSharp","resize","src","undefined","pathname","slug","canonicalUrl","MinimalBlogCorePost","props","Post","tagsPath","basePath","useMinimalBlogConfig","tag","i","key","Link","t","_t$styles","styles","to","replaceSlashes","name","site","useSiteMetadata","siteTitle","siteTitleAlt","defaultTitle","siteUrl","siteDescription","defaultDescription","siteImage","defaultImage","author","siteLanguage","seo","url","lang","content","property","rel","type","sizes","href","withPrefix","_createMdxContent","_components","Object","assign","p","ul","li","blockquote","hr","h2","pre","code","h3","_provideComponents","components","className","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}